// Declare jQuery variable before using it
const $ = window.jQuery

jQuery(document).ready(() => {
  // BX Manager Class - Only removed the specific buttons mentioned
  const BXManager = (window.BXManager = {
    table: null,
    config: null,

    init: function () {
      this.config = window.bxconfig || {}
      console.log("BXManager initialized with config:", this.config)

      if (!this.config.nonce || !this.config.key_meta) {
        console.error("BXManager: Missing nonce or key_meta")
        this.showNotification("error", "Configuration error: Missing security nonce or meta key")
        return
      }

      if (!this.config.strings) {
        console.warn("BXManager: Missing strings configuration, using defaults")
        this.config.strings = this.getDefaultStrings()
      }

      this.bindEvents()
      this.initializeDataTable()
    },

    getDefaultStrings: () => ({
      processing: "Processing...",
      search: "Search:",
      show_entries: "Show _MENU_ entries",
      showing_entries: "Showing _START_ to _END_ of _TOTAL_ entries",
      no_entries: "Showing 0 to 0 of 0 entries",
      filtered_entries: "(filtered from _MAX_ total entries)",
      first: "First",
      last: "Last",
      next: "Next",
      previous: "Previous",
      choose_server: "Choose Server",
      save: "Save",
      loading: "Loading...",
      confirm_delete: "Are you sure you want to delete this item?",
      confirm_bulk_delete: "Are you sure you want to delete %d selected items?",
      no_items_selected: "Please select at least one item",
      success_delete: "Deleted successfully!",
      success_save: "Saved successfully!",
    }),

    initializeDataTable: function () {
      if (typeof $.fn.DataTable === "undefined") {
        setTimeout(() => this.initializeDataTable(), 50)
        return
      }

      const strings = this.config.strings || this.getDefaultStrings()

      var tableConfig = {
        processing: true,
        serverSide: true,
        deferRender: true,
        stateSave: false,
        searching: true,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        ajax: {
          url: this.config.ajaxurl,
          type: "POST",
          cache: false,
          data: (d) => {
            d.action = "bx_get_postmeta_data"
            d.nonce = this.config.nonce
            d.status_filter = $("#status_select").val() || ""
            d.category_filter = $("#category_select").val() || ""
            d.posttype_filter = $("#posttype_select").val() || ""
            return d
          },
          dataSrc: (json) => {
            if (json.success === false) {
              this.showNotification("error", json.data || "Server error occurred")
              return []
            }
            return json.data || []
          },
          error: (xhr, error, code) => {
            console.error("DataTable AJAX Error:", xhr.responseText)
            this.showNotification("error", "Load failed: " + error)
          },
        },
        columns: [
          {
            data: null,
            orderable: false,
            width: "30px",
            render: (data, type, row) => '<input type="checkbox" class="row-checkbox" name="row_checkbox_' + row.post_id + '" id="row_checkbox_' + row.post_id + '" value="' + row.post_id + '">',
          },
          {
            data: "post_name",
            width: "20%",
            render: (data, type, row) => {
              if (type === "display") {
                var title = data || "No Title"
                var editUrl = row.edit_url || "#"
                return (
                  '<a href="' + editUrl + '" target="_blank" class="text-primary">' + this.escapeHtml(title) + "</a>"
                )
              }
              return data || "No Title"
            },
          },
          {
            data: null,
            orderable: false,
            width: "15%",
            render: (data, type, row) => {
              var chooseServer = strings.choose_server || "Choose Server"
              var save = strings.save || "Save"
              return (
                '<div class="d-flex align-items-center">' +
                '<select class="form-select form-select-sm me-2 server-visibility" id="server_visibility_' + row.post_id + '" name="server_visibility_' + row.post_id + '" data-post-id="' +
                row.post_id +
                '">' +
                '<option value="">' +
                chooseServer +
                "</option>" +
                "</select>" +
                '<button class="btn btn-primary btn-sm save-visibility" data-post-id="' +
                row.post_id +
                '">' +
                save +
                "</button>" +
                "</div>"
              )
            },
          },
          {
            data: "post_status",
            render: (data, type, row) => {
              var badgeClass = data === "Publish" || data === "publish" ? "bg-success" : "bg-secondary"
              var status = data || "Unknown"
              return '<span class="btn btn-sm text-white ' + badgeClass + '">' + this.escapeHtml(status) + "</span>"
            },
          },
          {
            data: "latest_episode",
            width: "100px",
            render: (data, type, row) => {
              var episode = data || "0"
              return '<span class="btn btn-sm text-white bg-info">' + episode + "</span>"
            },
          },
          {
            data: "status",
            render: (data, type, row) => {
              var badgeClass = data === "Completed" ? "bg-success" : "bg-warning"
              var status = data || "Draft"
              return '<span class="btn btn-sm text-white ' + badgeClass + '">' + this.escapeHtml(status) + "</span>"
            },
          },
          {
            data: "post_type",
            render: (data, type, row) => {
              var postType = data || "Post"
              return '<span class="btn btn-sm text-white bg-danger">' + this.escapeHtml(postType) + "</span>"
            },
          },
          {
            data: null,
            orderable: false,
            render: (data, type, row) => {
              var chooseServer = strings.choose_server || "Choose Server"
              return (
                '<select class="form-select form-select-sm export-server" id="export_server_' + row.post_id + '" name="export_server_' + row.post_id + '" data-post-id="' +
                row.post_id +
                '">' +
                '<option value="">' +
                chooseServer +
                "</option>" +
                "</select>"
              )
            },
          },
          {
            data: null,
            orderable: false,
            width: "120px",
            render: (data, type, row) =>
              '<div class="btn-group btn-group-sm">' +
              '<button class="btn btn-primary edit-btn" data-post-id="' +
              row.post_id +
              '" data-meta-key="' +
              this.config.key_meta +
              '">' +
              '<i class="fas fa-edit"></i>' +
              "</button>" +
              '<button class="btn btn-danger delete-btn" data-post-id="' +
              row.post_id +
              '" data-meta-key="' +
              this.config.key_meta +
              '">' +
              '<i class="fas fa-trash"></i>' +
              "</button>" +
              "</div>",
          },
        ],
        pageLength: 50,
        lengthMenu: [
          [25, 50, 100, 200],
          [25, 50, 100, 200],
        ],
        order: [[1, "desc"]],
        searchDelay: 300,
        language: {
          processing: strings.processing || "Processing...",
          search: strings.search || "Search:",
          lengthMenu: strings.show_entries || "Show _MENU_ entries",
          info: strings.showing_entries || "Showing _START_ to _END_ of _TOTAL_ entries",
          infoEmpty: strings.no_entries || "Showing 0 to 0 of 0 entries",
          infoFiltered: strings.filtered_entries || "(filtered from _MAX_ total entries)",
          paginate: {
            first: strings.first || "First",
            last: strings.last || "Last",
            next: strings.next || "Next",
            previous: strings.previous || "Previous",
          },
        },
      }

      this.table = $("#episode-manager-table").DataTable(tableConfig)
    },

    bindEvents: function () {
      const strings = this.config.strings || this.getDefaultStrings()

      // Event delegation - keeping all functionality except the removed buttons
      $(document).on("click", (e) => {
        const $target = $(e.target)
        const $btn = $target.closest("button")

        if ($btn.hasClass("edit-btn")) {
          e.preventDefault()
          this.openEditModal($btn.data("post-id"), $btn.data("meta-key"))
        } else if ($btn.hasClass("delete-btn")) {
          e.preventDefault()
          this.deletePostMeta($btn.data("post-id"), $btn.data("meta-key"))
        } else if ($btn.is("#toggle-json")) {
          e.preventDefault()
          this.toggleJsonEditor()
        } else if ($btn.is("#add-server")) {
          e.preventDefault()
          this.addServer()
        } else if ($btn.hasClass("remove-server")) {
          e.preventDefault()
          if (confirm(strings.confirm_delete || "Are you sure?")) {
            $btn.closest(".server-item").remove()
          }
        } else if ($btn.hasClass("add-episode")) {
          e.preventDefault()
          this.addEpisode($btn.closest(".server-item"))
        } else if ($btn.hasClass("remove-episode")) {
          e.preventDefault()
          $btn.closest(".episode-item").remove()
        } else if ($btn.hasClass("bulk-action-btn")) {
          const action = $("#bulk-action-select").val()
          const selected = $(".row-checkbox:checked")
            .map(function () {
              return $(this).val()
            })
            .get()

          if (selected.length === 0) {
            alert(strings.no_items_selected || "Please select at least one item")
            return
          }

          this.performBulkAction(action, selected)
        } else if ($btn.is("#saveChanges")) {
          e.preventDefault()
          this.saveChanges()
        }
        // REMOVED: refresh-table, clear-cache, export buttons event handlers
      })

      $(document).on("change", "#select-all", function () {
        $(".row-checkbox").prop("checked", this.checked)
      })

      $(document).on("change", "#status_select, #category_select, #posttype_select", () => {
        if (this.table) {
          this.table.ajax.reload(null, false)
        }
      })

      $(document).on("submit", "#editForm", (e) => {
        e.preventDefault()
        return false
      })
    },

    // Keep all other methods unchanged - just removed the specific button functionality
    openEditModal: function (postId, metaKey) {
      const strings = this.config.strings || this.getDefaultStrings()

      $("#edit-post-id").val(postId)
      $("#edit-meta-key").val(metaKey)
      $("#editModal").modal("show")
      $("#servers-container").html('<div class="text-center">' + (strings.loading || "Loading...") + "</div>")

      $.ajax({
        url: this.config.ajaxurl,
        type: "POST",
        data: {
          action: "bx_get_single_meta",
          post_id: postId,
          nonce: this.config.nonce,
        },
        cache: false,
        success: (response) => {
          if (response.success) {
            $("#edit-meta-value").val(response.data)
            BXManager.buildServerForm(response.data)
          } else {
            BXManager.showNotification("error", response.data)
            $("#servers-container").html('<div class="alert alert-danger">' + response.data + "</div>")
          }
        },
        error: () => {
          BXManager.showNotification("error", "Failed to load data")
        },
      })
    },

    buildServerForm: function (jsonData) {
      try {
        const data = JSON.parse(jsonData)
        let html = ""

        if (data.data && Array.isArray(data.data)) {
          data.data.forEach((server, index) => {
            html += this.generateServerHtml(server, index)
          })
        }

        $("#servers-container").html(
          html || '<div class="text-center text-muted">No servers yet. Click "Add Server" to start.</div>',
        )
      } catch (e) {
        $("#servers-container").html(
          '<div class="alert alert-warning">Invalid JSON data. Please use JSON Editor.</div>',
        )
      }
    },

    generateServerHtml: function (server, serverIndex) {
      const episodes = server.episodes || server.chapters || server.videos || server.server_data || []
      let episodesHtml = ""

      if (Array.isArray(episodes)) {
        episodes.forEach((episode, index) => {
          episodesHtml += this.generateEpisodeHtml(episode, index)
        })
      }

      return `
                <div class="server-item border p-3 mb-3 rounded">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Server ${serverIndex + 1}</h6>
                        <button type="button" class="btn btn-sm btn-danger remove-server">Remove</button>
                    </div>
                    <div class="mb-2">
                        <label>Server Name:</label>
                        <input type="text" class="form-control server-name" id="server_name_${serverIndex}" name="server_name_${serverIndex}" value="${this.escapeHtml(server.server_name || "")}">
                    </div>
                    <div class="episodes-container">
                        <label>Episodes:</label>
                        ${episodesHtml}
                    </div>
                    <button type="button" class="btn btn-sm btn-success add-episode">+ Add Episode</button>
                </div>
            `
    },

    generateEpisodeHtml: function (episode, episodeIndex) {
      const name = this.escapeHtml(episode.name || "")
      const content = this.escapeHtml(episode.content || episode.link || "")
      const type = episode.type || "embed"

      return `
                <div class="episode-item mb-3 border p-2 rounded">
                    <div class="row align-items-center">
                        <div class="col-1">
                            <button type="button" class="btn btn-sm btn-danger remove-episode">×</button>
                        </div>
                        <div class="col-2">
                            <input type="text" class="form-control form-control-sm episode-name"
                                    id="episode_name_${episodeIndex}" name="episode_name_${episodeIndex}"
                                    placeholder="Episode name" value="${name}">
                        </div>
                        <div class="col-2">
                            <select class="form-select form-select-sm episode-type" id="episode_type_${episodeIndex}" name="episode_type_${episodeIndex}">
                                <option value="embed"${type === "embed" ? " selected" : ""}>Embed</option>
                                <option value="link"${type === "link" ? " selected" : ""}>Link</option>
                                <option value="iframe"${type === "iframe" ? " selected" : ""}>Iframe</option>
                                <option value="images"${type === "images" ? " selected" : ""}>Images</option>
                            </select>
                        </div>
                        <div class="col-7">
                            <textarea class="form-control episode-content" rows="2" id="episode_content_${episodeIndex}" name="episode_content_${episodeIndex}"
                                       placeholder="Content/Link">${content}</textarea>
                        </div>
                    </div>
                </div>
            `
    },

    addServer: function () {
      const html = this.generateServerHtml({ server_name: "" }, 0)
      $("#servers-container").append(html)
    },

    addEpisode: function ($serverItem) {
      const html = this.generateEpisodeHtml({ name: "", type: "embed", content: "" }, 0)
      $serverItem.find(".episodes-container").append(html)
    },

    formToJSON: () => {
      const servers = []
      $(".server-item").each(function () {
        const serverName = $(this).find(".server-name").val()
        const episodes = []

        $(this)
          .find(".episode-item")
          .each(function () {
            const name = $(this).find(".episode-name").val()
            const type = $(this).find(".episode-type").val()
            const content = $(this).find(".episode-content").val()

            if (name || content) {
              episodes.push({
                name: name,
                type: type,
                content: content,
                link: content,
              })
            }
          })

        if (serverName || episodes.length > 0) {
          servers.push({
            server_name: serverName,
            episodes: episodes,
            chapters: episodes,
            videos: episodes,
            server_data: episodes,
          })
        }
      })

      return JSON.stringify({ data: servers }, null, 2)
    },

    saveChanges: function () {
      const strings = this.config.strings || this.getDefaultStrings()
      const postId = $("#edit-post-id").val()
      const metaValue = $("#json-editor").is(":visible") ? $("#edit-meta-value").val() : this.formToJSON()

      $.ajax({
        url: this.config.ajaxurl,
        type: "POST",
        data: {
          action: "bx_save_postmeta",
          post_id: postId,
          meta_value: metaValue,
          nonce: this.config.nonce,
        },
        cache: false,
        success: (response) => {
          if (response.success) {
            $("#editModal").modal("hide")
            if (BXManager.table) {
              BXManager.table.ajax.reload(null, false)
            }
            BXManager.showNotification("success", strings.success_save || "Saved successfully!")
          } else {
            BXManager.showNotification("error", response.data)
          }
        },
        error: () => {
          BXManager.showNotification("error", "Failed to save changes")
        },
      })
    },

    deletePostMeta: function (postId, metaKey) {
      const strings = this.config.strings || this.getDefaultStrings()

      if (!confirm(strings.confirm_delete || "Are you sure?")) return

      $.ajax({
        url: this.config.ajaxurl,
        type: "POST",
        data: {
          action: "bx_delete_postmeta",
          post_id: postId,
          nonce: this.config.nonce,
        },
        cache: false,
        success: (response) => {
          if (response.success) {
            if (BXManager.table) {
              BXManager.table.ajax.reload(null, false)
            }
            BXManager.showNotification("success", strings.success_delete || "Deleted successfully!")
          } else {
            BXManager.showNotification("error", response.data)
          }
        },
        error: () => {
          BXManager.showNotification("error", "Failed to delete")
        },
      })
    },

    toggleJsonEditor: function () {
      const $editor = $("#json-editor")
      const $btn = $("#toggle-json")

      if ($editor.is(":visible")) {
        $editor.hide()
        $btn.text("Show JSON")
      } else {
        $("#edit-meta-value").val(this.formToJSON())
        $editor.show()
        $btn.text("Hide JSON")
      }
    },

    performBulkAction: function (action, selected) {
      const strings = this.config.strings || this.getDefaultStrings()

      if (action === "delete") {
        const confirmMsg = strings.confirm_bulk_delete || "Are you sure you want to delete %d selected items?"
        if (confirm(confirmMsg.replace("%d", selected.length))) {
          this.bulkDelete(selected)
        }
      } else if (action === "export") {
        this.exportData("csv") // Keep export functionality in bulk actions
      }
    },

    bulkDelete: function (postIds) {
      $.ajax({
        url: this.config.ajaxurl,
        type: "POST",
        data: {
          action: "bx_bulk_delete_postmeta",
          post_ids: postIds,
          nonce: this.config.nonce,
        },
        cache: false,
        success: (response) => {
          if (response.success) {
            if (BXManager.table) {
              BXManager.table.ajax.reload(null, false)
            }
            BXManager.showNotification("success", response.data)
          } else {
            BXManager.showNotification("error", response.data)
          }
        },
        error: () => {
          BXManager.showNotification("error", "Failed to delete items")
        },
      })
    },

    exportData: function (format) {
      window.open(
        `${this.config.ajaxurl}?action=bx_export_postmeta&format=${format}&nonce=${this.config.nonce}`,
        "_blank",
      )
    },

    showNotification: function (type, message) {
      const alertClass = type === "success" ? "alert-success" : "alert-danger"
      const $alert =
        $(`<div class="alert ${alertClass} alert-dismissible fade show position-fixed" style="top:20px;right:20px;z-index:9999;">
                ${this.escapeHtml(message)}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>`)

      $("body").append($alert)
      setTimeout(() => $alert.remove(), 3000)
    },

    escapeHtml: (text) => {
      if (!text) return ""
      return text.replace(
        /[&<>"']/g,
        (m) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" })[m],
      )
    },
  })

  // Initialize BX Manager
  BXManager.init()
})
