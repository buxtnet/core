function getURLParameterValues(e, a) {
    a = a || window.location.href,
    e = e.replace(/[\[\]]/g, "\\><");
    a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(a);
    return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null
}
var $ = jQuery.noConflict();
var bxcfg = JSON.parse(atob(bx.player));
window.___ = function (key) {
    return bx.i18n[key] || key;
}
function decryptEncData(encryptedDataWithIv) {
    var Sha256 = CryptoJS.SHA256;
    var Hex = CryptoJS.enc.Hex;
    var Utf8 = CryptoJS.enc.Utf8;
    var AES = CryptoJS.AES;
    var secret_key = "TheQuickBrownFoxWasJumping";
    var secret_iv = "4f01bede9221586c";
    var key = Sha256(secret_key).toString(Hex).substr(0, 32);
    var iv = Sha256(secret_iv).toString(Hex).substr(0, 16);
    var decrypted = AES.decrypt(encryptedDataWithIv, Utf8.parse(key), {
        iv: Utf8.parse(iv),
    }).toString(Utf8);
    try {
        return JSON.parse(decrypted);
    } catch (error) {
        return decrypted;
    }
}
function bxplayer(data) {
    const playerInstance = jwplayer('ajax-player');
    const decrypted = decryptEncData(data);
    const type = decrypted.type || "embed";
    let sources = [];
    let tracks = [];
    if (decrypted && typeof decrypted === 'object') {
        sources = typeof decrypted.sources === 'string' ? JSON.parse(decrypted.sources.replace(/\\"/g, '"')) : (Array.isArray(decrypted.sources) ? decrypted.sources : []);
        tracks = typeof decrypted.tracks === 'string' ? JSON.parse(decrypted.tracks) : (Array.isArray(decrypted.tracks) ? decrypted.tracks : []);
    }
    const loadEmbed = () => {
        if (decrypted && decrypted.embedUrl) {
            const el = document.getElementById("ajax-player");
            const newEl = document.createElement("div");
            newEl.id = "ajax-player";
            newEl.innerHTML = decrypted.embedUrl;
            el.parentNode.replaceChild(newEl, el);
        }
    };
    const baseConfig = {
        key: bxcfg.key,
        primary: type === "embed" ? "html5" : "flash",
        playlist: [{
            image: bxcfg.poster || "",
            sources: sources,
            tracks: type === "embed" ? [] : tracks,
            captions: type !== "embed" ? {
                color: bxcfg.jw_color || "#ffffff",
                fontSize: bxcfg.jw_font || 16,
                backgroundOpacity: 0,
                edgeStyle: "raised"
            } : undefined
        }],
        base: ".",
        width: "100%",
        height: "100%",
        advertising: bxcfg.jw_adcode ? {
            tag: bxcfg.vast_file,
            client: "vast",
            skipoffset: bxcfg.skipoffset || 5,
            skipmessage: bxcfg.skipmessage || "Skip ad in xx seconds",
            skiptext: bxcfg.skiptext || "Skip ad"
        } : undefined,
        floating: bxcfg.floating_player ? { dismissible: true } : undefined,
        sharing: bxcfg.player_sharing ? { sites: ["reddit", "facebook", "twitter", "googleplus", "email", "linkedin"] } : undefined,
        hlshtml: true,
        fullscreen: true,
        playbackRateControls: true,
        displayPlaybackLabel: true,
        aspectratio: bxcfg.aspect_ratio || "16:9",
        about: {
            title: bxcfg.jw_about_text || "Buxt Core",
            link: bxcfg.jw_about_link || "https://buxt.com"
        }
    };

    playerInstance.setup(baseConfig);
    bxJwConfig(playerInstance);

    playerInstance.on("error", (error) => {
        if(bxcfg.autoreport) {
            reportError();
        }
    });

    if (type === "embed") {
        if (!bxcfg.jw_adcode) {
            playerInstance.on("ready", loadEmbed);
        } else {
            const triggerEmbed = () => { loadEmbed() };
            playerInstance.on("adComplete", triggerEmbed);
            playerInstance.on("adSkipped", triggerEmbed);
            playerInstance.on("adError", triggerEmbed);
            const timeout = (bxcfg.skipoffset ? bxcfg.skipoffset * 1000 : 5000) + 1000;
            setTimeout(() => {
                if (document.getElementById("ajax-player").innerHTML.trim() === "") {
                    console.warn("Fallback: Forcing embed load.");
                    loadEmbed();
                }
            }, timeout);
        }
    } else {
        bxResumeVideo(bx.resumeId, playerInstance);
    }
}
function LoadPlay(episodeSlug, serverId, postId, subsvId) {
    if (!$("#ajax-player").length) return false;
    const formData = new URLSearchParams();
    formData.append('slug', episodeSlug || 1);
    formData.append('server', serverId || 1);
    formData.append('postid', postId);
    formData.append('subsv_id', subsvId || '');
    showLoader();
    fetch(bx.rest_url + '/player', {
        method: 'POST',
        headers: {
            'X-WP-Nonce': bx.rest_nonce,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData.toString()
    })
    .then(res => res.json())
    .then(response => {
        if (response.success && response.data) {
            bxplayer(response.data);
        } else {
            $("#bxplayer-loader").after(`<p class="loader-text">${___('Error loading video.')}</p>`);
        }
    })
    .catch(err => {
        console.error(err);
        $("#bxplayer-loader").after(`<p class="loader-text">${___('Error loading video.')}</p>`);
    });

    return false;
}
function bxJwConfig(playerInstance) {
    playerInstance.on("ready", function () {
        $("#bxplayer-loader").hide().empty(); 
    });
    playerInstance.on("error", function () {
        if (bxcfg.bxplayer_error === "display_modal") {
            bxErrorDetect();
        } else {
            if(bxcfg.type === "movie"){
                var svlistsCount = $("#svlists .listsv").length;
                if (svlistsCount > 0) {
                    var randomIndex = Math.floor(Math.random() * svlistsCount);
                    showLoader();
                    $("#svlists .listsv").eq(randomIndex).trigger("click");
                }
            } else {
                var servers = $(".bxbtn").map(function() {
                    return String($(this).data("slug"));
                }).get();
                if (servers.length === 0) {
                    return;
                }
                var currentServer = String($(".bxbtn.active").data("slug") || 1);
                var currentIndex = servers.indexOf(currentServer);
                if (currentIndex === -1) {
                    currentIndex = 0;
                    currentServer = servers[0];
                }
                var nextIndex = (currentIndex + 1) % servers.length;
                var nextServer = servers[nextIndex];
                $("#bxplayer-loader").show().html(`<p class="loader-text">${___('Switching to backup server...')}</p>`);
                setTimeout(function() {
                    $("#bxplayer-loader").fadeOut(500, function() {
                        $(this).css('display', 'none').empty();
                    });
                }, 10000);
                var nextElement = $("#server" + nextServer);
                if (nextElement.length) {
                    nextElement.trigger("click");
                }
            }   
        }
        if (bxcfg.auto_reset_cache == 1) {
            const playerSlug = $(".bxbtn.active").data("slug") || 1;
            const playerServer = $(".bxbtn.active").data("sv") || 1;
            const playerId = $(".bxbtn.active").data("id");
            bxResetCache(playerSlug, playerServer, playerId);
        }
    });
    playerInstance.on("complete", function () {
        bxAutoNext();
    });
}
function is_Mobile() {
	var isMobile = false;
	(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) isMobile = true;})(navigator.userAgent||navigator.vendor||window.opera);
	return isMobile;
}
function bxreport() {
    const container = is_Mobile() ? document.body : document.getElementById('bxplayer-wrapper');
    if (!container) return;
    const existingModal = document.getElementById('bxReportModal');
    if (existingModal && existingModal.style.display === 'flex') {
        existingModal.remove();
        return;
    }
    const modals = document.querySelectorAll('.bx-modal');
    modals.forEach(modal => modal.remove());
    const issuesList = (bx.bxrp || '').split('\n').filter(Boolean);
    const modalHtml = `
        <div id="bxReportModal" class="bx-modal">
            <div class="bx-modal-content">
                <div class="bx-modal-header">
                    <span class="bx-close">&times;</span>
                    <h4 class="adult-content-title">${___('Report an Issue')}</h4>
                </div>
                <div class="bx-modal-body">
                    <ul class="bx-issues-list" style="list-style:none;padding:0;margin:0;">
                        ${issuesList.map((item,i)=>`
                            <li class="bx-issue-item" style="margin-bottom:5px;">
                                <input type="checkbox" id="bx_issue_${i}" value="${item}" class="bx-issue-checkbox">
                                <label for="bx_issue_${i}">${item}</label>
                            </li>
                        `).join('')}
                    </ul>
                    <div class="bx-report-form" style="display:none;">
                        <input type="text" id="bx_report_name" placeholder="Your name or email" style="width:100%; padding:5px; margin-bottom:5px;">
                        <textarea id="bx_report_content" rows="5" placeholder="Describe the issue..." style="width:100%; padding:5px;"></textarea>
                    </div>
                </div>
                <div class="bx-modal-footer" style="display:none;">
                    <button id="bxReportClose" class="bx-btn bx-btn-danger">${___('Close')}</button>
                    <button id="bxReportSubmit" class="bx-btn bx-btn-danger">${___('Send Report')}</button>
                </div>
            </div>
        </div>
    `;

    container.insertAdjacentHTML('beforeend', modalHtml);

    const modal = document.getElementById('bxReportModal');
    const checkboxes = modal.querySelectorAll('.bx-issue-checkbox');
    const form = modal.querySelector('.bx-report-form');
    const footer = modal.querySelector('.bx-modal-footer');
    const closeBtn = modal.querySelector('.bx-close');
    const closeBtnFooter = modal.querySelector('#bxReportClose');
    const submitBtn = modal.querySelector('#bxReportSubmit');
    modal.style.display = 'flex';
    checkboxes.forEach(cb => cb.addEventListener('change', () => {
        if ([...checkboxes].some(c=>c.checked)) {
            form.style.display = 'block';
            footer.style.display = 'flex';
        } else {
            form.style.display = 'none';
            footer.style.display = 'none';
        }
    }));

    const closeModal = () => modal.remove();
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
    submitBtn.addEventListener('click', async () => {
        const selectedIssues = [...checkboxes].filter(c=>c.checked).map(c=>c.value);
        const contentInput = document.getElementById('bx_report_content').value || '';
        const name = document.getElementById('bx_report_name').value || 'Anonymous';
        if (!selectedIssues.length) {
            alert(___('Please select at least one issue.'));
            return;
        }
        const content = contentInput || selectedIssues.join(', ');
        const postId = bx.postid || 0;
        if (!postId) {
            alert(___('Unable to determine post ID. Please try again or contact support.'));
            return;
        }
        submitBtn.disabled = true;
        submitBtn.textContent = 'Sending...';
        try {
            const formData = new FormData();
            formData.append('postid', postId);
            formData.append('server', bx.server || 1);
            formData.append('slug', bx.slug || '');
            formData.append('post_name', bx.title || document.title);
            formData.append('content', content);
            formData.append('name', name);
            formData.append('error_url', window.location.href);
            const response = await fetch(`${bx.rest_url}/report/auto_report`, {
                method: 'POST',
                headers: {
                    'X-WP-Nonce': bx.rest_nonce
                },
                body: formData
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            if (data.success) {
                alert(___('Report sent successfully!'));
                modal.remove();
            } else {
                alert(data.message || ___('Failed to send report!'));
                submitBtn.disabled = false;
                submitBtn.textContent = ___('Send Report');
            }
        } catch (err) {
            console.error('Error submitting report:', err);
            if (err.message.includes('HTTP error')) {
                alert(`Failed to send report! Server returned status: ${err.message.split('status: ')[1] || 'unknown'}`);
            } else {
                alert(___('Failed to send report!'));
            }
            submitBtn.disabled = false;
            submitBtn.textContent = ___('Send Report');
        }
    });
}
function bxResumeVideo(postKey, playerInstance) {
    if (bxcfg.resume_playback == 1) {
        playerInstance.on("ready", function() {
            if (typeof Storage === "undefined") return;
            var storageKey = "BxPlayerPosition-" + postKey;
            var resumeTime = parseFloat(localStorage[storageKey] || 0) || 0;
            playerInstance.once("play", function() {
                if (resumeTime > 0 && Math.abs(playerInstance.getDuration() - resumeTime) > 5) {
                    playerInstance.seek(resumeTime);
                    var a = new Date(1970, 0, 1);
                    a.setSeconds(resumeTime);
                    var resumeTimeStr = a.toTimeString().match(/\d{2}:\d{2}:\d{2}/)[0];
                    var resumeHtml = `
                        <div id="bxResumeModal" class="bx-modal">
                            <div class="bx-modal-content">
                                <div class="bx-modal-header">
                                    <span class="bx-close">&times;</span>
                                    <h4>${___('Continue watching')}?</h4>
                                </div>
                                <div class="bx-modal-body text-center">
                                    <p>${___('Automatically resumes your videos from where you played them last at')}: <b>${resumeTimeStr}</b></p>
                                    <div class="dialog-buttons">
                                        <button class="btn btn-primary yes"><i class="fa fa-ccw"></i> ${___('Playback')}</button>
                                        <button class="btn btn-secondary no"><i class="fa fa-play-circled-o"></i> ${___('Continue watching')}</button>
                                    </div>
                                    <small>${___('Do you want to continue viewing from the saved location or start from the beginning?')}</small>
                                </div>
                            </div>
                        </div>`;
                    if ($("#bxplayer-wrapper #bxResumeModal").length === 0) {
                        $("#bxplayer-wrapper").append(resumeHtml);
                    }
                    $("#bxplayer-wrapper #bxResumeModal").fadeIn();
                    $("body").on("click", "#bxResumeModal .bx-close, #bxResumeModal .no", function () {
                        $("#bxResumeModal").fadeOut();
                        playerInstance.play();
                    });
                    $("body").on("click", "#bxResumeModal .yes", function () {
                        $("#bxResumeModal").fadeOut();
                        localStorage[storageKey] = 0;
                        playerInstance.seek(0);
                        playerInstance.play();
                    });
                }
            });
            window.onunload = function() {
                localStorage[storageKey] = playerInstance.getPosition();
            };
        });
    }
}
function bxErrorDetect() {
    var serverListStyle = "";
    if ($("#svlists").length === 0) {
        serverListStyle = ' style="display:none;"';
    }
    var errorModalHtml = is_Mobile() ?
        '<div id="reLoadPlayerModal" class="bx-modal">' +
            '<div class="bx-modal-content">' +
                '<div class="bx-modal-header">' +
                    '<span class="bx-close">&times;</span>' +
                    '<h4 class="adult-content-title">(Error Code: 224003)</h4>' +
                '</div>' +
                '<div class="bx-modal-body text-center">' +
                    '<h4><strong>' + ___('This video file cannot be played') + '</strong></h4>' +
                    '<button type="button" class="bx-btn-danger" id="reBuildPlayer">' +
                        '<span id="icon-rebuild-player"></span>' + ___('Reload Player') +
                    '</button>' +
                    '<p' + serverListStyle + '>' + ___('or click on the buttons below') + '</p>' +
                    '<div id="serverList"></div>' +
                '</div>' +
            '</div>' +
        '</div>' :
        '<div id="reLoadPlayerModal" class="bx-modal">' +
            '<div class="bx-modal-content">' +
                '<div class="bx-modal-header">' +
                    '<span class="bx-close">&times;</span>' +
                    '<h4 class="adult-content-title">(Error Code: 224003)</h4>' +
                '</div>' +
                '<div class="bx-modal-body text-center">' +
                    '<h4><strong>' + ___('This video file cannot be played') + '</strong></h4>' +
                    '<p>' + ___('We are unable to find the video you are looking for. There could be several reasons for this, for example it got removed by the owner!') + '</p>' +
                    '<p>' + ___('To continue watching, please click on the "Reload Player" button') + '</p>' +
                    '<button type="button" class="bx-btn-danger" id="reBuildPlayer">' +
                        '<span id="icon-rebuild-player"></span>' + ___('Reload Player') +
                    '</button>' +
                    '<p' + serverListStyle + '>' + ___('or click on the buttons below') + '</p>' +
                    '<div id="serverList"></div>' +
                '</div>' +
            '</div>' +
        '</div>';
    if ($("#bxplayer-wrapper #reLoadPlayerModal").length === 0) {
        $("#bxplayer-wrapper").append(errorModalHtml);
    }
    $("#svlists").prependTo("#serverList");
    $("#bxplayer-wrapper #reLoadPlayerModal").fadeIn();
    $("#bxplayer-wrapper .bx-close").on("click", function () {
        $("#bxplayer-wrapper #reLoadPlayerModal").fadeOut(function(){
            $("#svlists").prependTo(".svlists");
        });
    });
}
function bxAutoNext() {
    var autoNextStatus = $("#autonext-status").text();
    var isLastEpisode = $(".bxlist-eps").find(".active").data("position") === "last";
    if (autoNextStatus !== "On" || isLastEpisode) {
        return;
    }
    var nextEpisodeUrl;
    if (bx.server > 1) {
        nextEpisodeUrl = $(".bxep-" + bx.server + "-" + bx.slug + ".active")
            .next()
            .find("span")
            .data("href");
    } else {
        nextEpisodeUrl = $(".bxep-" + bx.server + "-" + bx.slug + ".active")
            .next()
            .find("a")
            .attr("href");
    }
    var $currentEpisode = $(".bxep-" + bx.server + "-" + bx.slug + ".active");
    $currentEpisode.removeClass("active").find("a span").removeClass("active");
    $currentEpisode.next().addClass("active").find("a span").addClass("active");
    var countdown = 5;
    var intervalId = setInterval(function() {
        if (--countdown <= 0) {
            clearInterval(intervalId);
            window.location = nextEpisodeUrl;
        } else {
            $("#bxplayer-loader").show().html(`<p class="loader-text">${bx.player_autonext} <span>[${countdown}s]</span></p>`);
        }
    }, 1000);
}
function bxResetCache(slug, server, postId) {
    const formData = new URLSearchParams();
    formData.append('slug', slug);
    formData.append('server', server);
    formData.append('postid', postId);
    return fetch(bx.rest_url + '/cache/reset_cache', {
        method: 'POST',
        headers: {
            'X-WP-Nonce': bx.rest_nonce,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData.toString()
    })
    .then(res => res.json())
    .then(resp => {
        console.log(resp);
        return resp;
    });
}
async function reportError() {
    const activeBtn = document.querySelector(".bxbtn.active");
    if (!activeBtn) return;

    const slug = activeBtn.dataset.slug;
    const serverId = activeBtn.dataset.sv;
    const postId = activeBtn.dataset.id;
    const title = bxcfg.title || "Video Error";
    try {
        const formData = new FormData();
        formData.append('postid', postId);
        formData.append('server', serverId);
        formData.append('slug', slug);
        formData.append('post_name', title);
        formData.append('content', 'Auto Report');
        formData.append('name', 'BOT');
        formData.append('error_url', window.location.href);

        const response = await fetch(`${bx.rest_url}/report/auto_report`, {
            method: 'POST',
            headers: {
                'X-WP-Nonce': bx.rest_nonce
            },
            body: formData
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json(); 
    } catch (error) {
        console.error("Error reporting:", error);
    }
}
function showLoader() {
    $("#bxplayer-loader").show().css("position", "absolute").empty();
}
jQuery(function($) {
    const getActiveBtn = () => $(".bxbtn.active");
    const pausePlayer = () => typeof playerInstance !== "undefined" && playerInstance.pause();
    const closeModal = () => $("button.close").trigger("click");
    if ($("#ajax-player").length) {
        const svid = getURLParameterValues("svid");
        if (!svid) {
            LoadPlay(bx.slug, bx.server, bx.postid, "", "");
        } else {
            const $active = getActiveBtn();
            pausePlayer();
            $(`#server-item-${svid}`).addClass("active").siblings().removeClass("active");
            closeModal();
            LoadPlay($active.data("slug"), $active.data("sv"), $active.data("id"), svid, "");
        }
        setTimeout(() => {
            $("#autonext").toggle(getActiveBtn().data("embed") != 1);
        }, 2000);
    }
    $("body").on("click", ".video-server", function() {
        pausePlayer();
        $(this).addClass("active").siblings().removeClass("active");
        showLoader(); 
        closeModal();
        LoadPlay($(this).data("slug"), $(this).data("sv"), $(this).data("id"), "", "");
    });
    $("body").on("click", ".listsv", function(e) {
        e.preventDefault();
        const $active = $(".bxbtn.active");
        pausePlayer();
        $(this).addClass("active").siblings().removeClass("active");
        showLoader();
        $("#reLoadPlayerModal").fadeOut();
        LoadPlay($active.data("slug") || 1, $active.data("sv") || 1, $active.data("id"), $(this).data("subsv"), "");
    });

    $("#autonext").on("click", () => {
        $("#autonext-status").text( $("#autonext-status").text() == "On" ? "Off" : "On" );
    });
    if (bxcfg.detect && bx.is_single) {
        const showAdblockMsg = () => $("#bxplayer-loader").html(`<div class="loader-spinner"></div><p class="loader-text">${bxcfg.adb_msg}</p>`);
        typeof blockAdBlock === "undefined" ? showAdblockMsg() : blockAdBlock.onDetected(showAdblockMsg);
    }
    $("body").on("click", "#reBuildPlayer", function() {
        const $active = getActiveBtn();
        $("#icon-rebuild-player").addClass("bxplayer-loader");
        $("#bxplayer-wrapper #reLoadPlayerModal").fadeOut(() => {
            $("#svlists").prependTo(".svlists");
            showLoader();
            bxResetCache($active.data("slug") || 1, $active.data("sv") || 1, $active.data("id"));
            LoadPlay($active.data("slug") || 1, $active.data("sv") || 1, $active.data("id"), "", "");
        });
    });
});